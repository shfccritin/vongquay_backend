// server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const jwt = require('jsonwebtoken')
require('dotenv').config({ path: __dirname + '/.env' });
require('./cron/liveScheduler'); 

const MessageLog = require('./models/MessageLog');
const TelegramLog = require('./models/TelegramLog');

const app = express();
const PORT = process.env.PORT || 5000;
const codeRoutes = require("./routes/codeRoutes");
const adminRoutes = require("./routes/adminRoutes");
const adminCodeRoutes = require("./routes/adminCodeRoutes");
const adminRewardRoutes = require("./routes/adminRewardRoutes");
const adminLogRoutes = require("./routes/adminLogRoutes");
const publicRoutes = require("./routes/publicRoutes");
const adminRewardCodeRoutes = require("./routes/adminRewardCodeRoutes")
const sendTelegram = require('./routes/sendTelegram')
const getCode = require('./routes/getCode')
const broadcastRoute = require('./routes/sendBroadcast');
const chatRoutes = require('./routes/chatRoutes');
const unreadRoutes = require('./routes/unreadRoutes');
const scheduleRoutes = require('./routes/scheduleRoutes');

app.use(cors());
app.use(express.json());

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.MONGO_URI).then(() => console.log("‚úÖ MongoDB connected"))
  .catch(err => console.error("‚ùå MongoDB error:", err));

// Routes
app.get("/", (req, res) => {
  res.send("üéØ Backend API is running!");
});

app.use("/api", codeRoutes);
app.use("/api/admin", adminRoutes);
app.use("/api/admin/codes", adminCodeRoutes);
app.use("/api/admin/rewards", adminRewardRoutes);
app.use("/api/admin/logs", adminLogRoutes);
app.use("/api/public", publicRoutes);
app.use("/api/admin/reward-codes", adminRewardCodeRoutes);
app.use("/api", sendTelegram);
app.use("/api", getCode);
app.use("/api", broadcastRoute);
app.use('/api', chatRoutes);
app.use('/api', unreadRoutes);
app.use('/api', scheduleRoutes);


const http = require('http');
const { Server } = require('socket.io');
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: '*' } });

server.listen(PORT, () => {
  console.log(`üöÄ Server + Socket.IO running at http://localhost:${PORT}`);
});


function escapeMarkdownV2(text) {
  return text
    .replace(/\\/g, '\\\\')
    .replace(/_/g, '\\_')
    .replace(/\*/g, '\\*')
    .replace(/\[/g, '\\[')
    .replace(/\]/g, '\\]')
    .replace(/\(/g, '\\(')
    .replace(/\)/g, '\\)')
    .replace(/~/g, '\\~')
    .replace(/`/g, '\\`')
    .replace(/>/g, '\\>')
    .replace(/#/g, '\\#')
    .replace(/\+/g, '\\+')
    .replace(/-/g, '\\-')
    .replace(/=/g, '\\=')
    .replace(/\|/g, '\\|')
    .replace(/{/g, '\\{')
    .replace(/}/g, '\\}')
    .replace(/\./g, '\\.')
    .replace(/!/g, '\\!');
}

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

bot.on('polling_error', (err) => {
  console.error('‚ùå polling_error:', err.message);
});

// X·ª≠ l√Ω l·ªánh /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const from = msg.from;
  const fullName = `${from.first_name || ''} ${from.last_name || ''}`.trim();

  try {
    const existing = await TelegramLog.findOne({ telegramId: from.id });
    if (!existing) {
      await TelegramLog.create({
        telegramId: from.id,
        username: from.username || '',
        fullName: fullName || '',
        code: 'N/A',
        reward: 'N/A',
      });
      console.log(`‚úÖ ƒê√£ l∆∞u user m·ªõi: ${from.username || from.id}`);
    } else {
      console.log(`‚ÑπÔ∏è User ƒë√£ t·ªìn t·∫°i: ${from.username || from.id}`);
    }
  } catch (err) {
    console.error('‚ùå L·ªói khi l∆∞u user:', err);
  }

  const introMessage = `üëã Xin ch√†o anh/ch·ªã! 
Em l√†  *B√â B√ÅO TIN F168TV!* ‚Äì tr·ª£ l√Ω ri√™ng c·ªßa F168TV üç±

üéØ *Nhi·ªám v·ª• c·ªßa em:*
‚Ä¢ G·ª≠i th√¥ng b√°o s·ªõm nh·∫•t m·ªói khi c√≥:
  - üì∫ Livestream ph√°t code
  - ‚öîÔ∏è Minigame PK nh·∫≠n qu√†
  - üé° V√≤ng quay m·ªü m√¢m m·ªõi
  - üèÜ BXH fan ƒë∆∞·ª£c c·∫≠p nh·∫≠t

‚è≥ *Kh√¥ng c·∫ßn t√¨m ƒë√¢u xa* ‚Äì em b√°o tr∆∞·ªõc khi m·ªçi th·ª© di·ªÖn ra!

üìç *Mu·ªën kh√¥ng b·ªè l·ª° CODE ‚Äì QU√Ä ‚Äì LIVE HOT*, theo d√µi c√°c k√™nh ch√≠nh th·ª©c:

üîπ *Page ch√≠nh th·ª©c (t√≠ch xanh)*  
üëâ [F168TV](https://www.facebook.com/f168tv.net)

üîπ *Page PK N·ªï H≈©*  
üëâ [PKF168TV](https://www.facebook.com/PKF168TV)

üîπ *Page PK B·∫Øn C√°*  
üëâ [PK B·∫Øn C√° F168TV](https://www.facebook.com/PKBANCAF168TV)

üîπ *Channel N·ªï H≈© (Telegram)*  
üëâ [F168PK](https://t.me/F168PK)

üîπ *Channel B·∫Øn C√° (Telegram)*  
üëâ [F168TV B·∫Øn C√°](https://t.me/F168TVBANCA)

üîπ üîπüîπüîπüîπüîπüîπüîπüîπüîπ
M·ªåI TH·∫ÆC M·∫ÆC XIN LI√äN H·ªÜ B·ªò PH·∫¨N CSKH:
üëâ https://t.me/CSKHF168_TV`;

  const followUpMessage = `‚úÖ *ƒê√£ theo d√µi h·∫øt ch∆∞a ·∫°?*

üì© *M·ªói l·∫ßn c√≥ m√¢m m·ªõi ‚Äì em s·∫Ω b√°o tr∆∞·ªõc 15 ph√∫t ƒë·ªÉ m√¨nh v√†o s·ªõm, kh√¥ng l·ª° v√≤ng quay* üéÅ

üíå *Th·ªânh tho·∫£ng em c≈©ng ph√°t code ri√™ng cho ng∆∞·ªùi theo bot ‚Äì nh·ªõ b·∫≠t th√¥ng b√°o nha ·∫°!*`;

  try {
    await bot.sendMessage(chatId, escapeMarkdownV2(introMessage), {
      parse_mode: 'MarkdownV2',
    });
    await bot.sendMessage(chatId, escapeMarkdownV2(followUpMessage), {
      parse_mode: 'MarkdownV2',
    });
  } catch (err) {
    console.error('‚ùå L·ªói g·ª≠i tin nh·∫Øn:', err.message);
  }
});


// T·ª± ƒë·ªông tr·∫£ l·ªùi tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // B·ªè qua n·∫øu l√† l·ªánh /start
  if (text && text.toLowerCase().startsWith('/start')) return;


  // ‚úÖ L∆∞u log tin nh·∫Øn t·ª´ user
  await MessageLog.create({
    telegramId: msg.chat.id,
    message: msg.text,
    direction: 'user',
    isRead: false, 
  });
  
  // ‚úÖ G·ª≠i realtime cho t·∫•t c·∫£ client CSKH ƒëang m·ªü
  io.emit('receive-message', {
    telegramId: chatId,
    message: text,
    direction: 'user',
    timestamp: new Date(),
  });
});


console.log('ü§ñ Bot is running...');


io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) {
    return next(new Error('Kh√¥ng c√≥ token.'));
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET); 
    socket.user = decoded; 
    next();
  } catch (err) {
    console.error('‚ùå JWT kh√¥ng h·ª£p l·ªá:', err.message);
    return next(new Error('Token kh√¥ng h·ª£p l·ªá.'));
  }
});

io.on('connection', (socket) => {
  console.log('üü¢ CSKH connected via socket:', socket.id);

  socket.on('send-message', async ({ telegramId, message }) => {
    try {
      // G·ª≠i qua bot Telegram
      await bot.sendMessage(telegramId, message);

      // L∆∞u log tin nh·∫Øn g·ª≠i
      await MessageLog.create({
        telegramId,
        message,
        direction: 'cskh',
      });

      // Ph√°t l·∫°i cho giao di·ªán CSKH (realtime)
      io.emit('receive-message', {
        telegramId,
        message,
        direction: 'cskh',
        timestamp: new Date(),
      });

      console.log(`‚úÖ G·ª≠i th√†nh c√¥ng cho ${telegramId}`);
    } catch (err) {
      console.error('‚ùå L·ªói g·ª≠i t·ª´ CSKH qua bot:', err.message);
    }
  });

});

